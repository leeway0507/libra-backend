// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: update.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateClassNum = `-- name: UpdateClassNum :exec
UPDATE libsbooks
SET
    class_num = $1
WHERE
    isbn = $2 and lib_code = $3 AND 
    (class_num = '' OR class_num IS NULL)
`

type UpdateClassNumParams struct {
	ClassNum pgtype.Text `json:"classNum"`
	Isbn     pgtype.Text `json:"isbn"`
	LibCode  pgtype.Text `json:"libCode"`
}

func (q *Queries) UpdateClassNum(ctx context.Context, arg UpdateClassNumParams) error {
	_, err := q.db.Exec(ctx, updateClassNum, arg.ClassNum, arg.Isbn, arg.LibCode)
	return err
}

const updateDescription = `-- name: UpdateDescription :exec
UPDATE books 
SET Description = $1
WHERE isbn = $2 AND (Description = '' OR Description IS NULL)
`

type UpdateDescriptionParams struct {
	Description pgtype.Text `json:"description"`
	Isbn        pgtype.Text `json:"isbn"`
}

func (q *Queries) UpdateDescription(ctx context.Context, arg UpdateDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateDescription, arg.Description, arg.Isbn)
	return err
}

const updateRecom = `-- name: UpdateRecom :exec
UPDATE books 
SET Recommendation = $1
WHERE isbn = $2 AND (Recommendation = '' OR Recommendation IS NULL)
`

type UpdateRecomParams struct {
	Recommendation pgtype.Text `json:"recommendation"`
	Isbn           pgtype.Text `json:"isbn"`
}

func (q *Queries) UpdateRecom(ctx context.Context, arg UpdateRecomParams) error {
	_, err := q.db.Exec(ctx, updateRecom, arg.Recommendation, arg.Isbn)
	return err
}

const updateToc = `-- name: UpdateToc :exec
UPDATE books 
SET Toc = $1
WHERE isbn = $2 AND (Toc = '' OR Toc IS NULL)
`

type UpdateTocParams struct {
	Toc  pgtype.Text `json:"toc"`
	Isbn pgtype.Text `json:"isbn"`
}

func (q *Queries) UpdateToc(ctx context.Context, arg UpdateTocParams) error {
	_, err := q.db.Exec(ctx, updateToc, arg.Toc, arg.Isbn)
	return err
}
